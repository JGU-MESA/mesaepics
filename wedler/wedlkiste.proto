
Terminator = CR LF;

#Load DAC register values inot DAC
loaddac {
  out "LOAD";
  #wait 10;
  in "%s";
}

state.posu {
  out "STAT:POSU?";
  in "%16b";
}

states.posu {
  out "STAT:POSU?";
  in "%s";
}

#####   Check power on/off status of Wedler Power Supply   #####
#####   Get all 16 status bits, but read only the last bit ####
state.power {
  out "STAT:POSU?";
  in "%*15b%{0|1}";
}

#Check approve status of Wedler Power Supply
state.approve {
  in "%*14b%{0|1}";
}

#Check ground leak of Wedler Power Supply
state.groundleak {
  in "%*13b%{0|1}";
}

#Check overvoltage status of Wedler Power Supply
state.overvolt {
  in "%*12b%{0|1}";
}

#Check overcurrent of Wedler Power Supply
state.overcurr {
  in "%*11b%{0|1}";
}

#Check fan status of Wedler Power Supply
state.fan {
  in "%*10b%{0|1}";
}

#Check -30V supply status of Wedler Power Supply
state.-30vsupply {
  in "%*9b%{0|1}";
}

#Check +30V supply status of Wedler Power Supply
state.+30vsupply {
  in "%*8b%{0|1}";
}

#Check -5V supply status of Wedler Power Supply
state.-5vsupply {
  in "%*7b%{0|1}";
}

#Check +5V supply status of Wedler Power Supply
state.+5vsupply {
  in "%*6b%{0|1}";
}

#Check phase monitoring status of Wedler Power Supply
state.phasemoni {
  in "%*5b%{0|1}";
}

#Check temperature z-diode status of Wedler Power Supply
state.tempzdio {
  in "%*4b%{0|1}";
}

#Check temperature rectifier status of Wedler Power Supply
state.temprecti {
  in "%*3b%{0|1}";
}

#Check water cooling status of Wedler Power Supply
state.watercool {
  in "%*2b%{0|1}";
}

#Check temperature power card status of Wedler Power Supply
state.tempowcard {
  in "%*b%{0|1}";
}

#Check fuse of power card status of Wedler Power Supply
state.fusepowcard {
  in "%{0|1}";
}

#Switch on/off Wedler Power Supply
switch {
  out "STAT:POSU %{0|1}";
  in "OKAY";            
  @mismatch {in "NOP";}   #keine Auswirkungen, was da drin steht?
  @init { state.power; }
  wait 10;               #nach dem Ausschalten, bleibt das Geraet noch 30 sec an
}

#States of selected channel
#(0/1) (0/1/2/3)
#0 = ausgeschaltet
#1 = eingeschaltet
       #0 = weder Fuse noch Therm hat angesprochen
       #1 = Fuse hat angesprochen
       #2 = Therm hat angesprochen
       #3 = Fuse und Therm haben angesprochen
stateschan {
  out "STAT:CHAN? \$1";
  in "%i";
}

#State of selected channel Hajo
statechanonoff {
  separator = " ";
  out "STAT:CHAN? \$1";
  in "%{0|1} %*i";
  @mismatch {in "9 9";}
}

#State of selected channel Petra
onoff {
  out "STAT:CHAN? \$1";
  in "%i %*i";
}

statechanerror {
  out "STAT:CHAN? \$1";
  in "%*i %i";
  @mismatch {in "OKAY";}
}

#Switch on/off one channel
switchchan {
  out "STAT:CHAN \$1 %d";
  in "OKAY";
  @mismatch {in "HW ERROR";}
  wait 3;
}

#Reset Error Register (Status) of Wedler Power Supply
resetstatposu {
  out "STAT:RESET:STATUS";
  in "OKAY";
}

#Reset Thermal-Shutdown-Register
resettherm {
  out "STAT:RESET:THERM";
  in "OKAY";
}

#Reset Power Supply
#Geraet wird ausgeschaltet, DAC zurueckgesetzt, alle Kanaele auf 0 gestellt
resetposu {
  out "STAT:RESET:POSU";
  in "OKAY";
}

#Set DAC value of a channel
setdacval {
  out "CURR \$1 %d";
  in "OKAY";
  #@init { getdacval; }
}

#Read DAC register value of a channel
getdacval {
   out "CURR? \$1";
   in "%d";
}

#Read measured current of a channel
getact {
   out "MEAS:CURR? \$1";
   in "%d %(\$2)d";
   @mismatch {in "HW ERROR";}
}

#Read measured voltage of a channel
getvolt {
   out "MEAS:VOLT? \$1";
   in "%f";
   @mismatch {in "HW ERROR";}
}

