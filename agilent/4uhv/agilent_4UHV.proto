# Agilent 4UHV-Controller
# Terminator = CR;
# SEND:     MESSAGE + CRC
# MESSAGE =    <STX>     =0x02 or STX (Start of transmission)
#         +<ADDR>    =0x80
#        +<WIN>    (see table in documentation, can be written as "DEC" )
#        +<COM>    =0x30 or "0" to read the window, 0x31 or "1" to write in the window
#        +<DATA>    (alphanumeric ASCII, if only "read" then <DATA> is empty)
#        +<ETX>    =0x03 or ETX (End of transmission)
# RESPOND:     ANSWER + CRC
# ANSWER depends on MESSAGE type, see manual.
# ANSWER-<ADDR>: "%*1c" expect one char, but ignore it!
#
# CRC = XOR of all characters following <STX> and including the <ETX> terminator. 
# The value is hexadecimal coded and represented by two ASCII characters
# Streamdevice: "%01<xor>": 
# XOR all elements, 
# change checksum representation from binary to hexadecimal ASCII (2 bytes per checksum byte) (0), 
# starting from the second (1) digit (counting starts at 0,1,2...)
#
# StreamDevice already knows the ASCII-symbols STX,ETX,... by heart

GetStatus {
    out    STX,0x80,    "205","0",        ETX,"%01<xor>";
    in    STX,"%*1c",    "205","0","%6f",    ETX,"%01<xor>";
    @init{
        out    STX,0x80,    "205","0",        ETX,"%01<xor>";
        in    STX,"%*1c",    "205","0","%6f",    ETX,"%01<xor>";
    }
}

GetIonEnabled {
    out    STX,0x80,    "011","0",        ETX,"%01<xor>";
    in    STX,"%*1c",    "011","0","%1i",    ETX,"%01<xor>";
}

SetIonEnabled {
    out    STX,0x80,    "011","1","%1i",    ETX,"%01<xor>";
    in    STX,"%*1c",    "%r",            ETX,"%01<xor>";    #Answer: 0x6=6=ACK, 0x15=21=NACK
    @init{ GetIonEnabled ;}
}

GetSerialNo {
    out    STX,0x80,    "323","0",        ETX,"%01<xor>";
    in    STX,"%*1c",    "323","0","%10c",    ETX,"%01<xor>";    
    @init{
        out    STX,0x80,    "323","0",        ETX,"%01<xor>";
        in    STX,"%*1c",    "323","0","%10c",    ETX,"%01<xor>";    
    }    
}

GetTemp {
        out     STX,0x80,    "801","0",        ETX,"%01<xor>";
        in      STX,"%*1c",    "801","0","%6f",    ETX,"%01<xor>";
}

GetInterlock {
       out     STX,0x80,       "803","0",        ETX,"%01<xor>";
       in      STX,"%*1c",     "803","0","%x",        ETX,"%01<xor>";
}

GetErrorMessage {
#    out     STX,0x80,       "505","1",              ETX,"%01<xor>"; 
    #Select channel number in Win 505
    #otherwise all channel errors 
    #will be displayed
    out     STX,0x80,       "206","0",              ETX,"%01<xor>"; 
    #Send Request for error code on Win 206
    in      STX,"%*1c",     "206","0","%6f",    ETX,"%01<xor>";
}

GetVolt{
       out     STX,0x80,       "810","0",        ETX,"%01<xor>"; #Measure voltage on CH1
       in      STX,"%*1c",     "810","0","%6u",        ETX,"%01<xor>";
}

SetVolt {
    out     STX,0x80,       "613","1","%4i",    ETX,"%01<xor>"; #V target CH1,3000-7000,Step=1000,Def=7000
    in      STX,"%*1c",     "%r",            ETX,"%01<xor>";
    @init { GetVolt; }
}

GetCH1Volt {
       out     STX,0x80,       "613","0",        ETX,"%01<xor>"; #Get V that is set on CH1
       in      STX,"%*1c",     "613","0","%6u",        ETX,"%01<xor>";
}

GetCurr{
       out     STX,0x80,       "811","0",        ETX,"%01<xor>"; #Measure current on CH1
       in      STX,"%*1c",     "811","0","%E",        ETX,"%01<xor>";
}

GetPress{
       out     STX,0x80,       "812","0",        ETX,"%01<xor>"; #Measure pressure on CH1
       in      STX,"%*1c",     "812","0","%E",        ETX,"%01<xor>";
}
