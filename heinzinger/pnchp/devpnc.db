#
# Simple database and stream protocol file for basic SCPI (IEEE488.2) commands
#


#
# Short and long form of identification string
#

record(stringout, "$(P)$(R)debug")
{
	field(DTYP, "stream")
	field(OUT, "@devpnc.proto debug $(PORT)")
}

record(ai, "$(P)$(R)vlevel_set")
{
	field(FLNK, "$(P)$(R)belowvlevel")
#	field(VAL, "200.000")
}

record(calc, "$(P)$(R)belowvlevel")
{
	field(INPA, "$(P)$(R)u_get")
	field(INPB, "$(P)$(R)vlevel_set")
	field(CALC, "A>=B*.95?0:1")
}

record(stringin, "$(P)$(R)id_get")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devpnc.proto getIDN(39) $(PORT)")
    field(PINI, "YES")
}

record(bo, "$(P)$(R)rst")
{
    field(DESC, "SCPI Reset")
    field(DTYP, "stream")
    field(OUT,  "@devpnc.proto cmd(*RST) $(PORT)")
}

record(bo, "$(P)$(R)on_set")
{
	field(DESC, "Set output relay state")
	field(DTYP, "stream")
	field(OUT, "@devpnc.proto setOutputState $(PORT)")
	field(ZNAM, "Off")
	field(ONAM, "On")
#	field(FLNK, "$(P)$(R)on_get.PROC")
}


record(bi, "$(P)$(R)on_get")
{
	field(DESC, "Get output relay state")
	field(DTYP, "stream")
	field(INP, "@devpnc.proto getOutputState $(PORT)")
	field(ZNAM, "Off")
	field(ONAM, "On")
#	field(FLNK, "$(P)$(R)on_get.PROC")
}

#record(bi, "$(P)$(R)on_get")
#{
#	field(PINI, YES)
#	field(DTYP, "Soft Channel")
#	field(SCAN, "Passive")
#	field(INP, "$(P)$(R)on_set")
#	field(ZNAM, "Off")
#	field(ONAM, "On")
#}

record(ai, "$(P)$(R)u_get")
{
	field(SCAN, "1 second")
	field(DESC, "Voltage readback")
	field(DTYP, "stream")
	field(INP, "@devpnc.proto getVolt $(PORT)")
	field(LINR, "LINEAR")
	field(EGU, "kV")
	field(LOPR, 0)
	field(HOPR, 200)
	field(PREC, 3)
	field(FLNK, "$(P)$(R)belowvlevel")
}

record(ai, "$(P)$(R)i_get")
{
	field(SCAN, "1 second")
	field(DESC, "Current readback")
	field(DTYP, "stream")
	field(INP, "@devpnc.proto getCurr $(PORT)")
	field(EGU, "mA")
	field(LOPR, 0)
	field(HOPR, 10)
	field(PREC, 4)
}

record(ao, "$(P)$(R)u_set")
{
	field(DESC, "Set Voltage")
	field(EGU, "kV")
	field(LOPR, 0)
	field(HOPR, 200)
	field(PREC, 3)
	field(DTYP, "stream")
	field(OUT, "@devpnc.proto setVolt $(PORT)")
	field(DRVL, 0)
	field(DRVH, 200)
	#field(OROC, "1")
}

#Record f√ºr Rampen
record (calcout, "calc") {
  field(INPA, "$(P)$(R)SetVolt CP")
  field(INPB, "$(P)$(R)SetVolt.OVAL CP")
  field(CALC, "A!=B?6:0")
  field(OOPT, "On Change")
  field(OUT,  "$(P)$(R)SetVolt.SCAN")
}


record(ao, "$(P)$(R)i_set")
{
	field(DESC, "Set Current")
	field(EGU, "mA")
	field(LOPR, 0)
	field(HOPR, 10)
	field(PREC, 3)
	field(DTYP, "stream")
	field(OUT, "@devpnc.proto setCurr $(PORT)")
	field(DRVH, 10)
	field(DRVL, 0)
}

#record (calcout, "$(P)TURN_ON") {
#	field(DTYP, "Soft Channel")
#	field(SCAN, "Passive")
#	field(VAL, 0)
#	field(MDEL, -1)
#	field(INPA, "INTERLOCK:STATE NPP")
#	field(CALC, "A")
#	field(OCAL, "1")
#	field(OOPT, "When Non-zero")
#	field(DOPT, "Use OCAL")
#	field(OUT, "$(P)$(R)output_set")
#	field(FLNK, "$(P)$(R)output_set.PROC")
#}
#
#record (calcout, "$(P)TURN_OFF") {
#	field(DTYP, "Soft Channel")
#	field(SCAN, "Passive")
#	field(VAL, 0)
#	field(MDEL, -1)
#	field(CALC, "0")
#	field(OOPT, "Every Time")
#	field(DOPT, "Use CALC")
#	field(OUT, "$(P)$(R)output_set")
#	field(FLNK, "$(P)$(R)output_set.PROC")
#}
