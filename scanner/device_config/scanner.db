##====================================================
##================== Debug ===========================
record(stringout, "$(P)$(R)debug") {
   field(DTYP, "stream")
   field(OUT, "@scanner.proto debug $(PORT)")
   field(DISP, "1")
}


##====================================================
##================== Device ==========================
record(waveform, "$(P)$(R)DevIdent")
{
    field(DESC, "Get device idenfication of scanner")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getDevIdent $(PORT)")
    field(PINI, "YES")
    field(FTVL, "CHAR")
    field(NELM, "40")
}


##====================================================
##==================  Positions ======================
record(ai, "$(P)$(R)rawpos_get")
{
    field(DESC, "Get current position of scanner")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getAIValue(0) $(PORT)")
    field(SCAN, ".5 second")
    field(EGU, "bit")
    field(PREC, "0")
    field(HOPR, "65535")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)pos_get")
}

record(calc, "$(P)$(R)pos_get")
{
    field(DESC, "Get current position of scanner")
    field(DTYP, "stream")
    field(EGU, "mm")
    field(PREC, "2")
    field(HOPR, "150")
    field(LOPR, "0")
    field(INPA, "$(P)$(R)rawpos_get")
    field(INPB, "152.75")
    field(CALC, "A*B/65535") # 2^16-1=65535
    field(FLNK, "$(P)$(R)on_get")
}

record(calc, "$(P)$(R)on_get")
{
    field(DESC, "Scanner in zero position?")
    field(INPA, "$(NULL)")
    field(INPB, "$(P)$(R)pos_get")
    field(CALC, "0.99*A >= B || B >= 1.01*A ? 0 : 1")
}


##==== STOP =====
record(ao, "$(P)$(R)stoppos_set")
{
    field(DESC, "Set absolute endposition of scanner")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setStopPos $(PORT)")
    field(EGU, "mm")
    field(PREC, "1")
    field(HOPR, "140")
    field(LOPR, "1")
    field(DRVH, "140")
    field(DRVL, "1")
    field(FLNK, "$(P)$(R)stoppos_get.PROC")
}

record(ai, "$(P)$(R)stoppos_get")
{
    field(DESC, "Get current stopposition of scanner")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getStopPos $(PORT)")
    field(EGU, "mm")
    field(PREC, "2")
    field(HOPR, "150")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)relpos_get")
}

record(mbbo, "$(P)$(R)stopposdiscrete_set")
{
    field(DESC, "Set absolute endposition of scanner")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setStopPosDiscrete_$(P) $(PORT)")
    field(ZRST, "nullposition")
    field(ONST, "schirm1")
    field(TWST, "schirm2h")
    field(THST, "schirm2v")
    field(FRST, "scanbegin")
    field(FVST, "scanend")
    field(FLNK, "$(P)$(R)stoppos_get.PROC")
}


##==== START =====
record(ai, "$(P)$(R)startpos_get")
{
    field(DESC, "Get current startposition of scanner")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getStartPos $(PORT)")
    field(EGU, "mm")
    field(PREC, "2")
    field(HOPR, "150")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)relpos_get")
}

record(ao, "$(P)$(R)startpos_set")
{
    field(DESC, "Set absolute startposition of scanner")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setStartPos $(PORT)")
    field(EGU, "mm")
    field(PREC, "2")
    field(HOPR, "150")
    field(LOPR, "0")
    field(DRVH, "150")
    field(DRVL, "0")
    field(FLNK, "$(P)$(R)startpos_get")
}


##==== Relativ to current pos =====
record(ao, "$(P)$(R)relpos_set")
{
    field(DESC, "Set absolute startposition of scanner")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setRelativePos $(PORT)")
    field(EGU, "mm")
    field(PREC, "2")
    field(HOPR, "150")
    field(LOPR, "-150")
    field(DRVH, "150")
    field(DRVL, "-150")
    field(FLNK, "$(P)$(R)startpos_get.PROC")
}

record(calc, "$(P)$(R)relpos_get")
{
    field(DESC, "Get current startposition of scanner")
    field(INPA, "$(P)$(R)startpos_get")
    field(INPB, "$(P)$(R)stoppos_get")
    field(EGU, "mm")
    field(CALC, "A-B")
    field(PREC, "2")
    field(HOPR, "150")
    field(LOPR, "-150")
    field(PINI, "YES")
}

##====================================================
##================== Start and Stop ==================
record(mbbo, "$(P)$(R)start")
{
    field(DESC, "Start moving of scanner")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto startstop $(PORT)")
    field(ZRST, "Start")
    field(ONST, "Soft Stop")
    field(TWST, "Hard Stop")
}


##====================================================
##================== Running Status ==================
record(mbbiDirect, "$(P)$(R)run_get")
{
    field(DESC, "Is scanner moving?")
    field(DTYP, "stream")
    field(INP, "@scanner.proto running $(PORT)")
    field(NOBT, "3")
    field(SCAN, "1 second")
}


##====================================================
##================== Scanning mode ===================
record(mbbo, "$(P)$(R)mode_set")
{
    field(DESC, "Choose scan mode")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setMode $(PORT)")
    field(ZRST, "Single")
    field(ONST, "Scan")
    field(FLNK, "$(P)$(R)mode_get.PROC")
}

record(mbbi, "$(P)$(R)mode_get")
{
    field(DESC, "Get current mode")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getMode $(PORT)")
    field(ZRST, "Single")
    field(ONST, "Scan")
}


##====================================================
##================== Repetitions =====================
record(ao, "$(P)$(R)repeat_set")
{
    field(DESC, "Set number of repeats for scanmode")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setRepeat $(PORT)")
    field(PREC, "0")
    field(DRVH, "1e9")
    field(DRVL, "0")
    field(HOPR, "1e9")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)repeat_get.PROC")
}

record(ai, "$(P)$(R)repeat_get")
{
    field(DESC, "Get number of repeats for scanmode")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getRepeat $(PORT)")
    field(PREC, "0")
    field(HOPR, "1e9")
    field(LOPR, "0")
}

record(ai, "$(P)$(R)passes_get")
{
    field(DESC, "Get number of completed scans")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getPasses $(PORT)")
    field(PREC, "0")
    field(HOPR, "1e9")
    field(LOPR, "0")
    field(SCAN, "1 second")
}


##====================================================
##================== Velocity ========================
record(ao, "$(P)$(R)minvel_set")
{
    field(DESC, "Set minimum velocity")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setMinVel $(PORT)")
    field(PREC, "1")
    field(DRVH, "24.5")
    field(DRVL, "0")
    field(HOPR, "24.5")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)minvel_get.PROC")
}

record(ai, "$(P)$(R)minvel_get")
{
    field(DESC, "Get minimum velocity")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getMinVel $(PORT)")
    field(PREC, "1")
    field(HOPR, "24.5")
    field(LOPR, "0")
}

record(ao, "$(P)$(R)maxvel_set")
{
    field(DESC, "Set maximum velocity")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setMaxVel $(PORT)")
    field(PREC, "1")
    field(DRVH, "24.5")
    field(DRVL, "0")
    field(HOPR, "24.5")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)maxvel_get.PROC")
}

record(ai, "$(P)$(R)maxvel_get")
{
    field(DESC, "Get maximum velocity")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getMaxVel $(PORT)")
    field(PREC, "1")
    field(HOPR, "24.5")
    field(LOPR, "0")
}

##====================================================
##================== Acceleration 0-24500 ============
record(ao, "$(P)$(R)acc_set")
{
    field(DESC, "Get current acceleration")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setAcc $(PORT)")
    field(PREC, "2")
    field(DRVH, "24500")
    field(DRVL, "0")
    field(HOPR, "24500")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)acc_get.PROC")
}

record(ai, "$(P)$(R)acc_get")
{
    field(DESC, "Get current acceleration")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getAcc $(PORT)")
    field(PREC, "2")
    field(HOPR, "24500")
    field(LOPR, "0")
}

##====================================================
##================== Deceleration 0-24500 ============
record(ao, "$(P)$(R)dec_set")
{
    field(DESC, "Set current deceleration")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setDec $(PORT)")
    field(PREC, "2")
    field(DRVH, "24500")
    field(DRVL, "0")
    field(HOPR, "24500")
    field(LOPR, "0")
    field(FLNK, "$(P)$(R)dec_get.PROC")
}

record(ai, "$(P)$(R)dec_get")
{
    field(DESC, "Get current deceleration")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getDec $(PORT)")
    field(PREC, "2")
    field(HOPR, "24500")
    field(LOPR, "0")
}

##====================================================
##================== Datastorage =====================
record(bo, "$(P)$(R)resetdata")
{
    field(DESC, "Reset last datastorage")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto resetData $(PORT)")
}


##===============================================
##=============== Enablegenerator ===============
## EG Window LEFT
record(ai, "$(P)$(R)eg_windleft_get")
{
    field(DESC, "Get position comparator configuration")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getEnableGenWindow(LEFT) $(PORT)")
    field(HOPR, "150")
    field(LOPR, "0")
    field(PREC, "3")
    field(EGU, "mm")
    field(PINI, "YES")
}

record(ao, "$(P)$(R)eg_windleft_set")
{
    field(DESC, "Set position comparator configuration")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setEnableGenWindow(LEFT) $(PORT)")
    field(HOPR, "150")
    field(LOPR, "0")
    field(DRVH, "150")
    field(DRVL, "0")
    field(PREC, "3")
    field(EGU, "mm")
    field(FLNK, "$(P)$(R)eg_windleft_get")
}


## EG Window RIGHT
record(ai, "$(P)$(R)eg_windright_get")
{
    field(DESC, "Get position comparator configuration")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getEnableGenWindow(RIGH) $(PORT)")
    field(HOPR, "150")
    field(LOPR, "0")
    field(PREC, "3")
    field(EGU, "mm")
    field(PINI, "YES")
}

record(ao, "$(P)$(R)eg_windright_set")
{
    field(DESC, "Set position comparator configuration")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setEnableGenWindow(RIGH) $(PORT)")
    field(HOPR, "150")
    field(LOPR, "0")
    field(DRVH, "150")
    field(DRVL, "0")
    field(PREC, "3")
    field(EGU, "mm")
    field(FLNK, "$(P)$(R)eg_windright_get")
}


## EG Window Filter
record(ai, "$(P)$(R)eg_windfilter_get")
{
    field(DESC, "No pulses below value in 10ns")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getEnableGenWindow(FILT) $(PORT)")
    field(HOPR, "1e9")
    field(LOPR, "0")
    field(PREC, "1")
    field(ASLO, "10")
    field(EGU, "ns")
    field(PINI, "YES")
}

record(ao, "$(P)$(R)eg_windfilter_set")
{
    field(DESC, "No pulses below value in 10ns")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setEnableGenWindow(FILT) $(PORT)")
    field(HOPR, "1e9")
    field(LOPR, "0")
    field(DRVH, "1e9")
    field(DRVL, "0")
    field(PREC, "1")
    field(ASLO, "10")
    field(EGU, "ns")
    field(FLNK, "$(P)$(R)eg_windfilter_get")
}


##===============================================
##=============== Trigger =======================
## Trigger Edge Selection
record(mbbi, "$(P)$(R)trig_edge_get")
{
    field(DESC, "Get config of active edge")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getTriggerBinary(EDGE) $(PORT)")
    field(ZRST, "Steigende Flanke")
    field(ONST, "Fallende Flanke")
    field(TWST, "Beide Flanken")
    field(THST, "Pegel")
    field(PINI, "YES")
}

record(mbbo, "$(P)$(R)trig_edge_set")
{
    field(DESC, "Set config of active edge")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setTriggerBinary(EDGE) $(PORT)")
    field(ZRST, "Steigende Flanke")
    field(ONST, "Fallende Flanke")
    field(TWST, "Beide Flanken")
    field(THST, "Pegel")
    field(FLNK, "$(P)$(R)trig_edge_get")
}


## Trigger Delta Position
record(ai, "$(P)$(R)trig_deltpos_get")
{
    field(DESC, "Get position comparator configuration")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getTrigger(DELT) $(PORT)")
    field(HOPR, "150")
    field(LOPR, "0")
    field(PREC, "3")
    field(EGU, "mm")
    field(PINI, "YES")
}

record(ao, "$(P)$(R)trig_deltpos_set")
{
    field(DESC, "Set position comparator configuration")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setTrigger(DELT) $(PORT)")
    field(HOPR, "150")
    field(LOPR, "0")
    field(DRVH, "150")
    field(DRVL, "0")
    field(PREC, "3")
    field(EGU, "mm")
    field(FLNK, "$(P)$(R)trig_deltpos_get.PROC")
}


## Cycle Trigger
record(ai, "$(P)$(R)trig_cycle_get")
{
    field(DESC, "Get current period of cycle trigger")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getTrigger(CYCL) $(PORT)")
    field(HOPR, "1")
    field(LOPR, "10e-9")
    field(PREC, "1")
    field(ASLO, "1e-8")
    field(EGU, "s")
    field(PINI, "YES")
}

record(ao, "$(P)$(R)trig_cycle_set")
{
    field(DESC, "Set current period of cycle trigger")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setTrigger(CYCL) $(PORT)")
    field(HOPR, "2")
    field(LOPR, "10e-9")
    field(DRVH, "2")
    field(DRVL, "1e-4") # Lower values are not feasible and limited by ADC
    field(PREC, "1")
    field(ASLO, "1e-8")
    field(EGU, "s")
    field(FLNK, "$(P)$(R)trig_cycle_get.PROC")
}


##===============================================
##=============== Function FU10 =================
##========== FU10 Enablegenerator ===============
## EG Input (Ch. 2.1.8.1)
record(mbbi, "$(P)$(R)eg_input_FU10_get")
{
    field(DESC, "Get current active input")
    field(INP, "@scanner.proto getEnableGen(FU10,INPU) $(PORT)")
    field(DTYP, "stream")
    field(ZRST, "None active")
    field(ONST, "Ausgang LF0")
    field(TWST, "Ausgang LF1")
    field(THST, "Ausgang LF0 und LF1")
    field(PINI, "YES")
}

record(mbbo, "$(P)$(R)eg_input_FU10_set")
{
    field(DESC, "Set current active input")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setEnableGen(FU10,INPU) $(PORT)")
    field(ZRST, "None active")
    field(ONST, "Ausgang LF0")
    field(TWST, "Ausgang LF1")
    field(THST, "Ausgang LF0 und LF1")
    field(FLNK, "$(P)$(R)eg_input_FU10_get")
}


## EG FunctionType (Ch. 2.1.8.1)
record(mbbi, "$(P)$(R)eg_func_FU10_get")
{
    field(DESC, "Get current active function")
    field(INP, "@scanner.proto getEnableGen(FU10,FUNC) $(PORT)")
    field(DTYP, "stream")
    field(ZRST, "AND")
    field(ONST, "OR")
    field(TWST, "XOR")
    field(PINI, "YES")
}

record(mbbo, "$(P)$(R)eg_func_FU10_set")
{
    field(DESC, "Set current active function")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setEnableGen(FU10,FUNC) $(PORT)")
    field(ZRST, "AND")
    field(ONST, "OR")
    field(TWST, "XOR")
    field(FLNK, "$(P)$(R)eg_func_FU10_get")
}


## EG Output Inversion (Ch. 2.1.8.1)
record(bi, "$(P)$(R)eg_outp_FU10_get")
{
    field(DESC, "Get current logic func inverter")
    field(INP, "@scanner.proto getEnableGen(FU10,OUTP) $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Not inverted")
    field(ONAM, "Inverted")
    field(PINI, "YES")
}

record(bo, "$(P)$(R)eg_outp_FU10_set")
{
    field(DESC, "Set current logic func inverter")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setEnableGen(FU10,OUTP) $(PORT)")
    field(ZNAM, "Not inverted")
    field(ONAM, "Inverted")
    field(FLNK, "$(P)$(R)eg_outp_FU10_get")
}


##========== FU10 Trigger =======================
## Trigger Input
record(mbbi, "$(P)$(R)trig_input_FU10_get")
{
    field(DESC, "Get trigger input of FU10")
    field(DTYP, "stream")
    field(INP, "@scanner.proto getTriggerFU(FU10,INPU) $(PORT)")
    field(ZRST, "None active")
    field(ONST, "Ausgang LF0")
    field(TWST, "Ausgang LF1")
    field(THST, "Ausgang LF0 und LF1")
    field(PINI, "YES")
}

record(mbbo, "$(P)$(R)trig_input_FU10_set")
{
    field(DESC, "Select trigger input FU10")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setTriggerFU(FU10,INPU) $(PORT)")
    field(ZRST, "None active")
    field(ONST, "Ausgang LF0")
    field(TWST, "Ausgang LF1")
    field(THST, "Ausgang LF0 und LF1")
    field(FLNK, "$(P)$(R)trig_input_FU10_get.PROC")
}


## Trigger FunctionType (Ch. 2.1.8.1)
record(mbbi, "$(P)$(R)trig_func_FU10_get")
{
    field(DESC, "Get current active function")
    field(INP, "@scanner.proto getTriggerFU(FU10,FUNC) $(PORT)")
    field(DTYP, "stream")
    field(ZRST, "AND")
    field(ONST, "OR")
    field(TWST, "XOR")
    field(PINI, "YES")
}

record(mbbo, "$(P)$(R)trig_func_FU10_set")
{
    field(DESC, "Set current active function")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setTriggerFU(FU10,FUNC) $(PORT)")
    field(ZRST, "AND")
    field(ONST, "OR")
    field(TWST, "XOR")
    field(FLNK, "$(P)$(R)trig_func_FU10_get")
}


## Trigger Output Inversion (Ch. 2.1.8.1)
record(bi, "$(P)$(R)trig_outp_FU10_get")
{
    field(DESC, "Get current logic func inverter")
    field(INP, "@scanner.proto getTriggerFU(FU10,OUTP) $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Not inverted")
    field(ONAM, "Inverted")
    field(PINI, "YES")
}

record(bo, "$(P)$(R)trig_outp_FU10_set")
{
    field(DESC, "Set current logic func inverter")
    field(DTYP, "stream")
    field(OUT, "@scanner.proto setTriggerFU(FU10,OUTP) $(PORT)")
    field(ZNAM, "Not inverted")
    field(ONAM, "Inverted")
    field(FLNK, "$(P)$(R)trig_outp_FU10_get")
}
